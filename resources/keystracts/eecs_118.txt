distributed memory parallel computers teraflops performance high performance fortran hpf distributed memory parallel computers or distributed computer systems are widely recognized as the only cost-effective means of achieving teraflops performance in the near future however the fact remains that they are difficult to program and advances in software for these machines have not kept pace with advances in hardware this thesis addresses several issues in providing runtime support for in-core as well as out-of-core programs on distributed memory parallel computers this runtime support can be directly used in application programs for greater efficiency portability and ease of programming it can also be used together with a compiler to translate programs written in a high-level data-parallel language like high performance fortran hpf to node programs for distributed memory machines in distributed memory programs it is often necessary to change the distribution of arrays during program execution this thesis presents efficient and portable algorithms for runtime array redistribution the algorithms have been implemented on the intel touchstone delta and are found to scale well with the number of processors and array size this thesis also presents algorithms for all to all collective communication on fat tree and two dimensional mesh interconnection topologies the performance of these algorithms on the cm 5 and touchstone delta is studied extensively a model for estimating the time taken by these algorithms on the basis of system parameters is developed and validated by comparing with experimental results a number of applications deal with very large data sets which cannot fit in main memory and hence have to be stored in files on disks resulting in out of core programs this thesis also describes the design and implementation of efficient runtime support for out of core computations several optimizations for accessing out of core data are presented an extended two phase method is proposed for accessing sections of out of core arrays efficiently this method uses collective io and the io workload is divided among processors dynamically depending on the access requests performance results obtained using this runtime support for out of core programs on the touchstone delta are presented