binary analysis machine learning memory forensics software security vulnerability search the past decade has been witnessing an explosion of various applications and devicesthis big-data era challenges the existing security technologies new analysis techniquesshould be scalable to handle big data scale codebase they should be become smartand proactive by using the data to understand what the vulnerable points are and wherethey locate effective protection will be provided for dissemination and analysis of the datainvolving sensitive information on an unprecedented scalein this dissertation i argue that the code search techniques can boost existing securityanalysis techniques vulnerability identification and memory analysis in terms of scalability and accuracy in order to demonstrate its benefits i address two issues of code search by using the code analysis scalability and accountability i further demonstrate the benefit of code search by applying it for the scalable vulnerability identification [57] and thecross-version memory analysis problems [55 56]firstly i address the scalability problem of code search by learning higher-level semanticfeatures from code [57] instead of conducting fine-grained testing on a single deviceor program it becomes much more crucial to achieve the quick vulnerability scanningin devices or programs at a big data scale however discovering vulnerabilities in bigcode is like finding a needle in the haystack even when dealing with known vulnerabilities this new challenge demands a scalable code search approach to this end i leverage successful techniques from the image search in computer vision community and propose a novel code encoding method for scalable vulnerability search in binary code the evaluation results show that this approach can achieve comparable or even better accuracy and efficiency than the baseline techniquessecondly i tackle the accountability issues left in the vulnerability searching problemby designing vulnerability-oriented raw features [58] the similar code does not alwaysrepresent the similar vulnerability so it requires that the feature engineering for the codesearch should focus on semantic level features rather than syntactic ones i propose toextract conditional formulas as higher-level semantic features from the raw binary code toconduct the code search a conditional formula explicitly captures two cardinal factorsof a vulnerability 1 erroneous data dependencies and 2 missing or invalid conditionchecks as a result the binary code search on conditional formulas produces significantlyhigher accuracy and provides meaningful evidence for human analysts to further examinethe search results the evaluation results show that this approach can further improvethe search accuracy of existing bug search techniques with very reasonable performanceoverheadfinally i demonstrate the potential of the code search technique in the memory analysisfield and apply it to address their across-version issue in the memory forensic problem[55 56] the memory analysis techniques for cots software usually rely on theso-called data structure profiles for their binaries construction of such profiles requiresthe expert knowledge about the internal working of a specified software version howeverit is still a cumbersome manual effort most of time i propose to leverage the code searchtechnique to enable a notion named cross-version memory analysis which can update aprofile for new versions of a software by transferring the knowledge from the model thathas already been trained on its old version the evaluation results show that the code search based approach advances the existing memory analysis methods by reducing themanual efforts while maintaining the reasonable accuracy with the help of collaborators ifurther developed two plugins to the volatility memory forensic framework [2] and showthat each of the two plugins can construct a localized profile to perform specified memoryforensic tasks on the same memory dump without the need of manual effort in creating the corresponding profile