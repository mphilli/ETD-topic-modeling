instruction-set process calculus hardware composition high-level abstraction is important for formal verification of complex designs such as systems-on-a-chip instruction-set descriptions are widely used for modern digital specifications but formalisms to support them are scarce modeling microprogrammed machines for instance remains a challenge we created a process calculus named ispcal instruction set process calculus to model and reason about synchronous hardware composition at the instruction-set levelispcal is a language useful for describing synchronous digital systems and a calculus for formally equating one description with another it features value-passing for efficient datapath modeling mutual recursion parallel composition and simultaneous events for synchronous systems the operational semantics of ispcal is defined with labelled transitions and bisimulation equivalence the algebraic properties of ispcal are formally provedispcal is embedded in the higher-order logic theorem proving system by conservative extension of the higher order logic the deep embedding ensures sound language development with precise formal definitions enables formal machine-checked verification of the language properties and provides automated support for applications of ispcal it also is an implementation of ispcalthe utility of ispcal is illustrated by a variety of hardware examples including simple logic gates and common subsystems such as flip-flops level-sensitive latches registers and memories composed finite-state machines stacks of unconstrained word length microprogrammed machines and a pdp-8 instruction-set machine these examples are described as algorithmic state machines corresponding to hardware flowcharts instructionset process descriptions and as structures composed of simpler components the equivalence of these descriptions is shown using bisimulation