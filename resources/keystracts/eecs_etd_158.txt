view merging data structures vlsi corner stitching the goal of this study is to study the basic framework for data structures in vlsi design and modeling tools and to attempt to improve upon these structures in a number of ways this study looks at the underlying data structures and algorithms in electronic design and automation eda and parasitic extraction and verification pev tools as a whole and attempts to take a framework or systems approach towards their study past research has either attempted to study specific sub-structures or the overall design or else study the relationships between different views of a given design we aim to study the major data structures in a given layoutmodeling tool as a whole and design them from the ground up with the final goal being not only better performance of the constituent parts but better interaction and collaboration of the parts into a unified whole the fundamental strengths of comer-stitching data structure such as neighbor finding directed area enumeration and channel finding are enhanced with the introduction of improved efficiency in areas of net representation and extractionjust as comer-stitching was a hybrid variation on the neighbor-pointer data structure which strove to improve upon that basic structure so too we study a number of variations on the basic comer-stitched topology and propose a number of alternative forms with various benefits a solution is also proposed for one fundamental weakness of the corner-stitching algorithm which has driven many developers to use other structures like quad-trees k-d trees and linked lists this weakness is the inability of the standard corner-stitching data structure to efficiently handle overlapping polygonsevidence is also presented to show why past fears pertaining to the type of solution we propose were to a large degree unwarranted in general we also strive to avoid redundancy and memory waste though tight integration and facilitation of local-updates of support information such as net representation we also strive to fully exploit and reflect the hierarchical nature of a vlsi design in the data structure itself again avoiding inefficient memory utilization wasteful processing or re-processing after local updates and providing for independence of sub-cell design information across designs