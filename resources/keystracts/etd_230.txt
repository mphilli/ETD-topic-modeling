binary analysis code-reuse attacks control-flow integrity program integrity during a cyber-attack an adversary executes offensive maneuvers to target computer systems particularly an attacker often exploits a vulnerability within a program hijacks control-flow and executes malicious code data execution prevention dep a hardware-enforced security feature prevents an attacker from directly executing the injected malicious code therefore attackers have resorted to code-reuse attacks wherein carefully chosen fragments of code within existing code sections of a program are sequentially executed to accomplish malicious logic code-reuse attacks are ubiquitous and account for majority of the attacks in the wild on one hand due to the wide use of closed-source software binary-level solutions are essential on the other hand without access to source-code and debug-information defending raw binaries is harda majority of defenses against code-reuse attacks enforce control-flow integrity a program property that requires the runtime execution of a program to adhere to a statically determined control-flow graph cfg -- a graph that captures the intended flow of control within the program while defenses against code-reuse attacks have focused on reducing the attack space due to the lack of high-level semantics in the binary they lack in precision which in turn results in smaller yet significant attack spacethis dissertation presents program integrity models aimed at narrowing the attack space available to execute code-reuse attacks first we take a semantic-recovery approach to restrict the targets of indirect branches in a binary then we further improve the precision by recovering c-level semantics and enforce a strict integrity model that improves precision for virtual function calls in the binaryfinally in order to further reduce the attack space we take a different perspective on defense against code-reuse attacks and introduce stack-pointer integrity -- a novel integrity model targeted at ensuring the integrity of stack pointer as opposed to the instruction pointerour results show that the semantic-recovery-based approaches can help in significantly reducing the attack space by improving the precision of the underlying cfg function-level semantic recovery can eliminate 9947 of inaccurate targets whereas recovering virtual callsites and vtables at a c level can eliminate 9999 of inaccurate targets