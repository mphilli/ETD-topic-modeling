locality maintenance distributed memory data remapping computer science it is often assumed that computational load balance cannot be achieved in parallel and distributed systems without the use of a priori domain knowledge including precedence constraints and locality information hence in distributed memory architectures locality maintenance and load balancing are seen as user level activities involving compiler and runtime system support in software most efforts on locality conscious data remapping for load balancing require the availability of a global data dependency graph all such software schemes need an explicit phase for the remapping-system execution where the application execution is halted these schemes view load-balancing and locality maintenance as top-down problems in the sense that the user maps knowledge about domain-data interactions into the corresponding execution locality characteristics about architecture-level data abstractionsthe research reported in this dissertation takes a completely different approach showing excellent prospects for a bottom-up automated approach in this approach localityload-balance are seen as ultimately concerned with architecture-level abstractions this dissertation presents the first to our knowledge architecture-level scheme for extracting locality concurrent with the application execution an artificial neural network coprocessor is used for dynamically monitoring processor reference streams to learn temporally emergent utilities of data elements in ongoing local computations successful extraction of locality and load information at this level considerably eases the programming burden on the userthe bottom-up approach presented in this dissertation facilitates use of kernel-level load balancing schemes further easing the user programming burden a kernel-level scheme migrates data to processor memories evincing higher utilities during load-balancing this dissertation presents the successful implementation of a locality-conscious attached kernel scheduling algorithm in time-shared multi-processor systems by resolving the notion of tasks according to our memory-mapped semantics we integrate the unit of load balancing and locality maintenance this allows our system to migrate lightweight memory units incrementally to balance computational load while maintaining locality properties this approach also avoids the problems inherent in migrating heavyweight tasks by taking advantage of current trends supporting data migration over process migrationthe performance of an execution-driven simulation evaluating the proposed co-processor and kernel-level scheduler are presented for three applications the applications chosen represent the range of load and locality fluxes encountered in parallel programs with a static load and locality characteristics unstructured mesh b slowly varying localities for fixed dataset sizes barnes-hut and c rapidly fluctuating localities among slowing varying dataset sizes wator the wator application belongs to the class of dynamic and adaptive applications which has been little explored by most other researchers the performance results indicate the viability and success of the coprocessor in concurrently extracting locality information about ongoing computations such locality information is used succesfully by the kernel-level attached scheduling techniques in achieving and maintaining both computational locality and load balance this is evidenced by improved individual application turnaround times as well as enhanced system throughput