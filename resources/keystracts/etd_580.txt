dynamic binary analysis dynamic taint analysis emulation fuzz testing security virtualization dynamic binary analysis is a prevalent and indispensable technique in program analysis while several dynamic binary analysis tools and frameworks have been proposed all suffer from one or more of prohibitive performance degradation a semantic gap between the analysis code and the execution under analysis architectureos specificity being user-mode only and lacking flexibility and extendability this dissertation describes the design of the dynamic executable code analysis framework decaf a virtual machine-based multi-target whole-system dynamic binary analysis framework in short decaf seeks to address the shortcomings of existing whole-system dynamic analysis tools and extend the state of the art by utilizing a combination of novel techniques to provide rich analysis functionality without crippling amounts of execution overhead decaf extends the mature qemu whole-system emulator a type-2 hypervisor capable of emulating every instruction that executes within a complete guest system environmentdecaf provides a novel hardware event-based method of just-in-time virtual machine introspection vmi to address the semantic gap problem it also implements a novel instruction-level taint tracking engine at bitwise level of granularity ensuring that taint propagation is sound and highly precise throughout the guest environment a formal analysis of the taint propagation rules is provided to verify that most instructions introduce neither false positives nor false negatives decafs design also provides a plugin architecture with a simple-to-use event-driven programming interface that makes it both flexible and extendable for a variety of analysis tasksthe implementation of decaf consists of 9550 lines of c code and 10270 lines of c code its performance is evaluated using cpu2006 spec benchmarks which show an average overhead of 605 for system wide tainting and 12 for vmi three platformneutral decaf plugins - instruction tracer keylogger detector and api tracer - are described and evaluated in this dissertation to demonstrate the ease of use and effectiveness of decaf in writing cross-platform and system-wide analysis toolsthis dissertation also presents the virtual device fuzzer vdf a scalable fuzz testing framework for discovering bugs within the virtual devices implemented as part of qemu such bugs could be used by malicious software executing within a guest under analysis by decaf so the discovery reproduction and diagnosis of such bugs helps to protect decaf against attack while improving qemu and any analysis platforms built upon qemu vdf uses selective instrumentation to perform targeted fuzz testing which explores only the branches of execution belonging to virtual devices under analysis by leveraging record and replay of memory-mapped io activity vdf quickly cycles virtual devices through an arbitrarily large number of states without requiring a guest os to be booted or present once a test case is discovered that triggers a bug vdf reduces the test case to the minimum number of readswrites required to trigger the bug and generates source code suitable for reproducing the bug during debugging and analysisvdf is evaluated by fuzz testing eighteen qemu virtual devices generating 1014 crash or hang test cases that reveal bugs in six of the tested devices over 80 of the crashes and hangs were discovered within the first day of testing vdf covered an average of 6232 of virtual device branches during testing and the average test case was minimized to a reproduction test case only 1857 of its original size