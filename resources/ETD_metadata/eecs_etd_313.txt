$TITLE:
State-Based Techniques For Designing, Verifying And Debugging Message Passing Systems

$DEPARTMENT:
Electrical Engineering and Computer Science

$KEYWORDS:
Message passing systems, IDEs, Code development

$ABSTRACT:
Message passing systems support the applications of concurrent  events, where independent or semi-independent events occur simultaneously in a  nondeterministic fashion. The nature of independence, random interactions and  concurrency made the code development of such applications complicated and  error-prone. Conventional code development environments or IDEs, such as  Microsoft Visual Studio, provide little programming support in this regard.  Furthermore, ensuring the correctness of a message passing system is a  challenge. Typically, it is important to guarantee that a system meets its  desired specifications along its construction process. Model checking is one of  the techniques used in software verification which has proven to be effective in  discovering hidden design and implementation errors. The required advanced  knowledge of formal methods and temporal languages is one of the impediments in  adopting model checking by software developers. To integrate model checking  environments and conventional IDEs, this dissertation proposes a multi-phase  development framework that facilitates designing, verifying, implementing and  debugging state-based message passing systems. The techniques and design  principles of the proposed framework focus on improving and easing the software  development experience. In the first phase, a two-level design methodology is  proposed through using abstract high-level communication blocks and hierarchical  state-behavioral descriptions that were developed in this research. In the  second phase, a new method based on choosing from a pre-determined set of  patterns in concurrent communication properties is proposed to facilitate  collecting the essential specifications of the system where the atomic  propositions are linked with the system design. A complex property can be  attained by hierarchically nesting some of these patterns. A procedure to  automatically generate formal models in a model checker (MC) language is  proposed. Once the model that contains both the design and the properties of the  system are generated, a model checker is used to verify the correctness of the  proposed system and ensure its compliance with specifications. To help in  locating the source of an undesired specification, if any, a procedure to map a  counter example generated by the MC to the original design is presented. In the  third phase, a skeleton code of the design specification is generated in a  general programming language such as Microsoft C\#, Java, etc. moreover, the  ability to debug the generated code using a conventional IDE while tracing the  debugging process back to the original design was established. Finally, a  graphical software tool that supports the proposed framework is developed where  SPIN MC is used as a verifier. The tool was used to develop and verify several  case studies. The proposed framework and the developed software tool can be  considered a key solution for message passing systems design and verification.