$TITLE:
Graph-based mechanical product family modeling and functional tolerancing for mass customization

$DEPARTMENT:
Mechanical and Aerospace Engineering

$KEYWORDS:
Graph-based, Product family, Functional tolerancing, Mass customization, Mechanical assembly

$ABSTRACT:
To meet the needs for product variety, many companies are shifting from a mass production mode to mass customization, which demands quick response to the needs of individual customers with high quality and low costs. One of the key elements of mass customization is that the product family can share some modules. The multifunction nature of mechanical components necessitates designers to redesign them each time a component's function changes. This is the main obstacle to the practical mechanical product family modeling. In this thesis, a graph grammar based mechanical product family modeling method is proposed. By the method, a product is generated by applying production rules to the graph of the base product, following customers' or manufacturing engineers' requirements. Changes of functional features of each component are recorded and updated automatically during the generation process following the changes of joints between the component and other components. The other issue that is studied in this thesis is tolerancing, which is a critical part of the product design process because it is intimately related to a product's quality and costs. A functional tolerance specification method, called the mirror method, is proposed to provide guidelines for the component's datum reference frame construction and generic and uniform functional tolerance specifications. Improvements have been made in a tolerance synthesis scheme which is formulated as a non-linear constrained optimization (or cost minimization) process. A method for mapping the 3D generic deviation parameters of features from the deviation space to tolerance values as per the ASME Y14.5 standard has been introduced. Certain critical aspects of the scheme have been implemented in SolidWorks Â®  , by using its API (Application Programming Interface) and C++.